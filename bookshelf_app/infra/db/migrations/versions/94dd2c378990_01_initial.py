"""01_initial

Revision ID: 94dd2c378990
Revises: 
Create Date: 2024-05-17 06:17:39.333548

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '94dd2c378990'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('name', sa.String(length=100), nullable=False, comment='著者'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('name'),
    comment='著者'
    )
    op.create_index(op.f('ix_authors_is_deleted'), 'authors', ['is_deleted'], unique=False)
    op.create_table('books',
    sa.Column('book_id', sa.Uuid(), nullable=False, comment='主キー'),
    sa.Column('isbn13', sa.String(length=13), nullable=False, comment='ISBN13'),
    sa.Column('title', sa.String(length=100), nullable=False, comment='書籍名'),
    sa.Column('published_at', sa.Date(), nullable=False, comment='出版日時'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('book_id'),
    comment='書籍情報'
    )
    op.create_index(op.f('ix_books_is_deleted'), 'books', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_books_isbn13'), 'books', ['isbn13'], unique=False)
    op.create_index(op.f('ix_books_published_at'), 'books', ['published_at'], unique=False)
    op.create_index(op.f('ix_books_title'), 'books', ['title'], unique=False)
    op.create_table('publishers',
    sa.Column('name', sa.String(length=100), nullable=False, comment='名称'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('name'),
    comment='出版社'
    )
    op.create_index(op.f('ix_publishers_is_deleted'), 'publishers', ['is_deleted'], unique=False)
    op.create_table('tags',
    sa.Column('tag_id', sa.Uuid(), nullable=False, comment='主キー'),
    sa.Column('name', sa.String(length=30), nullable=False, comment='タグ名'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('tag_id'),
    comment='タグ'
    )
    op.create_index(op.f('ix_tags_is_deleted'), 'tags', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Uuid(), nullable=False, comment='主キー'),
    sa.Column('name', sa.String(length=30), nullable=False, comment='ユーザー名'),
    sa.Column('email', sa.String(length=100), nullable=False, comment='メールアドレス'),
    sa.Column('hashed_password', sa.String(length=256), nullable=False, comment='パスワード'),
    sa.Column('roles', sa.JSON(), nullable=False, comment='ロール'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    comment='ユーザー'
    )
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_table('books_authors_association_table',
    sa.Column('books_book_id', sa.Uuid(), nullable=True),
    sa.Column('authors_name', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['authors_name'], ['authors.name'], ),
    sa.ForeignKeyConstraint(['books_book_id'], ['books.book_id'], )
    )
    op.create_table('books_publishers_association_table',
    sa.Column('books_book_id', sa.Uuid(), nullable=True),
    sa.Column('publishers_name', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['books_book_id'], ['books.book_id'], ),
    sa.ForeignKeyConstraint(['publishers_name'], ['publishers.name'], )
    )
    op.create_table('books_tags_association_table',
    sa.Column('books_book_id', sa.Uuid(), nullable=True),
    sa.Column('tags_tag_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['books_book_id'], ['books.book_id'], ),
    sa.ForeignKeyConstraint(['tags_tag_id'], ['tags.tag_id'], )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('books_tags_association_table')
    op.drop_table('books_publishers_association_table')
    op.drop_table('books_authors_association_table')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_is_deleted'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_publishers_is_deleted'), table_name='publishers')
    op.drop_table('publishers')
    op.drop_index(op.f('ix_books_title'), table_name='books')
    op.drop_index(op.f('ix_books_published_at'), table_name='books')
    op.drop_index(op.f('ix_books_isbn13'), table_name='books')
    op.drop_index(op.f('ix_books_is_deleted'), table_name='books')
    op.drop_table('books')
    op.drop_index(op.f('ix_authors_is_deleted'), table_name='authors')
    op.drop_table('authors')
    # ### end Alembic commands ###
